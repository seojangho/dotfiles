" required by vim-plug
    call plug#begin('~/.vim/plugged')

" Plugins
    Plug 'rust-lang/rust.vim', { 'for': 'rust' }
    Plug 'octol/vim-cpp-enhanced-highlight', { 'for': 'cpp' }
    Plug 'pangloss/vim-javascript'
    Plug 'tikhomirov/vim-glsl'
    Plug 'evanmiller/nginx-vim-syntax'
    Plug 'stephpy/vim-yaml'
    Plug 'Yggdroot/indentLine'
    Plug 'SirVer/ultisnips'
    Plug 'taglist.vim'
    Plug 'plasticboy/vim-markdown'
    Plug 'perl-support.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'scrooloose/nerdtree'
    Plug 'tpope/vim-surround'
    Plug 'scrooloose/syntastic'
    Plug 'othree/html5.vim'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
    Plug 'cespare/vim-toml'
    Plug 'jiangmiao/auto-pairs'

" required by vim-plug
    call plug#end()

" general
    set encoding=utf-8
    set nocompatible
    filetype plugin indent on

" gvim
    if has("gui_running")
        set guioptions-=m  "remove menu bar
        set guioptions-=T  "remove toolbar
        set guioptions-=r  "remove right-hand scroll bar
        set guioptions-=L  "remove left-hand scroll bar
        set guifont=Droid\ Sans\ Mono\ Dotted\ for\ Powerline\ Regular\ 11
    endif

" 단축키 설정
    " NERDTree
        map <F2> :NERDTreeToggle<CR>
    " ctags
        nmap <F8> :Tlist<CR>
    " syntastic
        nmap <F9> :call ToggleErrors(<CR>)
    " 영역이 지정된 상태에서 Tab과 Shift-Tab으로 들여쓰기, 내어쓰기를 할 수 있도록 함
        vmap <Tab> >gv
        vmap <S-Tab> <gv
    " Shift-Enter로 새 줄 열기
        imap <S-CR> <ESC>o

" 탭을 4자의 공백으로 설정
    set shiftwidth=4
    set softtabstop=4
    set expandtab

" 검색 관련 설정
    " 검색어 강조
        set hlsearch
    " 검색시 파일 끝에서 처음으로 되돌리기 안함
        set nowrapscan
    " 검색시 대소문자를 구별하지 않음
        set ignorecase
    " <Space>로 검색이 가능하게 함.
        map <space> /

" 짝 추가
    set matchpairs+=“:”
    set matchpairs+=‘:’
    set showmatch

" 문법 강조
    filetype plugin on
    filetype indent on
    color desert
    syntax on

" 편집 인터페이스
    " 삑소리 대신 번쩍이기
        set visualbell
    " vim에서 마우스 사용 가능
        " set mouse=a
    " 완성 중인 명령을 표시
        set showcmd
    " 줄 번호 표시
        set number
    " 줄 번호 표시 너비 설정
        set numberwidth=5
    " highlight trailing whitespace
        au BufEnter,WinEnter * match ErrorMsg '\s\+$'
    " allow backspacing over everything in insert mode
        set backspace=indent,eol,start

" 들여쓰기
    set autoindent
    set smartindent

" airline
    set laststatus=2
    set noshowmode
    set t_Co=256
    let g:airline_theme='badwolf'
    let g:airline#extensions#tabline#enabled = 0
    let g:airline_powerline_fonts = 1

" vertical line indentation
    let g:indentLine_color_term = 239
    let g:indentLine_color_gui = '#AAA'
    let g:indentLine_char = '│'

" vimwiki
    let g:vimwiki_list = [{'path': '~/wiki/', 'path_html': '~/wiki_html/'}]

" syntastic
    let g:syntastic_check_on_open = 1
    let g:syntastic_enable_signs = 1
    let g:syntastic_cpp_check_header = 1

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    highlight SyntasticErrorSign guifg=white guibg=red
    highlight SyntasticErrorLine guibg=#2f0000

    let g:syntastic_c_compiler = 'gcc'

    let g:syntastic_cpp_compiler = 'g++'
    let g:syntastic_cpp_compiler_options = ' -std=c++11'

    let g:loaded_syntastic_cpp11_gcc_checker = 1
    let g:syntastic_cpp11_compiler = executable('g++') ? 'g++' : 'clang++'
    let g:syntastic_cpp_include_dirs = [ '../external/glfw-3.0.3/include/GLFW/', 'external/glfw-3.0.3/include/GLFW/', 'external/glm-0.9.4.0/', '../external/glm-0.9.4.0/', 'external/glew-1.9.0/include/' , '../external/glew-1.9.0/include/' ]

    function! ToggleErrors()
        let old_last_winnr = winnr('$')
        lclose
        if old_last_winnr == winnr('$')
            " Nothing was closed, open syntastic error location panel
            Errors
        endif
    endfunction

" SirVer/ultisnips
    " Trigger configuration. Do not use <tab> if you use
    " https://github.com/Valloric/YouCompleteMe.
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<c-b>"
    let g:UltiSnipsJumpBackwardTrigger="<c-z>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

" host-specific settings
if filereadable($HOME . "/.jangho/hosts/" . hostname() . "/vim/vimrc_host")
    exec "source " . $HOME . "/.jangho/hosts/" . hostname() . "/vim/vimrc_host"
endif
